##################################################
# Git Modules
##################################################

function (GitModules_UpdateOrCheck check)
  message(STATUS ${SECTION_HEADER})
  message(STATUS "Submodules")
  file(STRINGS ".gitmodules" GIT_SUBMODULES_FILE)
  foreach (GIT_SUBMODULE_LINE ${GIT_SUBMODULES_FILE})
    string(FIND ${GIT_SUBMODULE_LINE} "[" GIT_SUBMODULE_START)
    if (${GIT_SUBMODULE_START} EQUAL -1)
      set(GIT_SUBMODULE_START FALSE)
    else ()
      set(GIT_SUBMODULE_START TRUE)
    endif ()
    if (GIT_SUBMODULE_START)
      list(APPEND GIT_SUBMODULES ${GIT_SUBMODULE})
      set(GIT_SUBMODULE "${GIT_SUBMODULE_LINE}\n")
    else ()
      string(APPEND GIT_SUBMODULE "${GIT_SUBMODULE_LINE}\n")
    endif ()
  endforeach (${GIT_SUBMODULE_LINE})
  list(APPEND GIT_SUBMODULES ${GIT_SUBMODULE})
  unset(GIT_SUBMODULE)
  foreach (GIT_SUBMODULE ${GIT_SUBMODULES})
    message(STATUS ${SECTION_SPLITTER})
    # Name
    string(REGEX MATCH "\".+\"" GIT_SUBMODULE_NAME ${GIT_SUBMODULE})
    string(REPLACE "\"" "" GIT_SUBMODULE_NAME ${GIT_SUBMODULE_NAME})
    message(STATUS "Name: ${GIT_SUBMODULE_NAME}")
    # Path
    string(REGEX MATCH "path = .+" GIT_SUBMODULE_PATH ${GIT_SUBMODULE})
    string(REGEX REPLACE "path[ ]*=[ ]*" "" GIT_SUBMODULE_PATH ${GIT_SUBMODULE_PATH})
    string(REGEX REPLACE "\n.+" "" GIT_SUBMODULE_PATH ${GIT_SUBMODULE_PATH})
    set(GIT_SUBMODULE_PATH "${PROJECT_SOURCE_DIR}/${GIT_SUBMODULE_PATH}")
    message(STATUS "Path: ${GIT_SUBMODULE_PATH}")
    # Fetch
    execute_process(COMMAND git symbolic-ref refs/remotes/origin/HEAD WORKING_DIRECTORY ${GIT_SUBMODULE_PATH} OUTPUT_VARIABLE GIT_DEFAULT_BRANCH)
    string(REPLACE "refs/remotes/origin/" "" GIT_DEFAULT_BRANCH ${GIT_DEFAULT_BRANCH})
    string(REPLACE "\n" "" GIT_DEFAULT_BRANCH ${GIT_DEFAULT_BRANCH})
    execute_process(COMMAND git checkout ${GIT_DEFAULT_BRANCH} WORKING_DIRECTORY ${GIT_SUBMODULE_PATH})
    execute_process(COMMAND git fetch WORKING_DIRECTORY ${GIT_SUBMODULE_PATH})
    # Check
    if (check)
      message(STATUS "Checking '${GIT_SUBMODULE_NAME}'...")
      execute_process(COMMAND git status WORKING_DIRECTORY ${GIT_SUBMODULE_PATH} OUTPUT_VARIABLE GIT_STATUS_OUTPUT)
      string(FIND ${GIT_STATUS_OUTPUT} "up to date" GIT_SUBMODULE_UPDATED)
      string(FIND ${GIT_STATUS_OUTPUT} "Changes" GIT_SUBMODULE_MODIFIED)
      if (${GIT_SUBMODULE_UPDATED} EQUAL -1)
        message(FATAL_ERROR "Outdated '${GIT_SUBMODULE_NAME}' detected.")
      elseif (NOT ${GIT_SUBMODULE_MODIFIED} EQUAL -1)
        message(FATAL_ERROR "Modified '${GIT_SUBMODULE_NAME}' detected.")
      endif ()
      message(STATUS "Updated '${GIT_SUBMODULE_NAME}' detected.")
    # Update
    else ()
      message(STATUS "Updating '${GIT_SUBMODULE_NAME}'...")
      execute_process(COMMAND git reset --hard HEAD WORKING_DIRECTORY ${GIT_SUBMODULE_PATH})
      execute_process(COMMAND git pull WORKING_DIRECTORY ${GIT_SUBMODULE_PATH})
      execute_process(COMMAND git add ${GIT_SUBMODULE_NAME} WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
      message(STATUS "Finished updating '${GIT_SUBMODULE_NAME}'.")
    endif ()
  endforeach (${GIT_SUBMODULE})
  message(STATUS ${SECTION_FOOTER})
endfunction ()
